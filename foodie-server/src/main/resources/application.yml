spring:
  datasource:
    url: jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
    username: ${POSTGRES_USER}
    password: ${POSTGRES_PASS}
    driver-class-name: ${chris.datasource.driver-class-name}

  jpa:
    hibernate:
      ddl-auto: none
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.spatial.dialect.postgis.PostgisPG95Dialect

  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
      password: ${REDIS_PASS}
      lettuce:
        pool:
          max-active: 10
          max-idle: 10
          min-idle: 1
          max-wait: 1000ms
          time-between-eviction-runs: 10s

  rabbitmq:
    host: ${RABBITMQ_HOST}
    port: ${RABBITMQ_PORT}
    username: ${RABBITMQ_USER}
    password: ${RABBITMQ_PASS}

  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 100MB

  kafka:
    admin:
      auto-create: true
    bootstrap-servers: ${KAFKA_BOOTSTRAP}
    producer:
      retries: 3
      acks: all
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    consumer:
      group-id: merchant-service
      enable-auto-commit: true
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer

logging:
  level:
    com:
      chris:
        repository: debug
        service: info
        controller: info

resilience4j:
  ratelimiter:
    instances:
      registerUpload:
        limit-for-period: 5
        limit-refresh-period: 1d
        timeout-duration: 0
      userUpload:
        limit-for-period: 5
        limit-refresh-period: 1m
        timeout-duration: 0

chris:
  jwt:
    secret-base64: ${CHRIS_JWT_SECRET_BASE64}
    access-expiration-seconds: ${CHRIS_JWT_ACCESS_EXPIRATION_SECONDS}
    refresh-expiration-seconds: ${CHRIS_JWT_REFRESH_EXPIRATION_SECONDS}
  google:
    oauth:
      client-id: ${CHRIS_GOOGLE_OAUTH_CLIENT_ID}
    maps:
      api-key: ${CHRIS_GOOGLE_MAPS_API_KEY}
  aws:
    s3:
      bucket: ${CHRIS_AWS_S3_BUCKET}
      region: ${CHRIS_AWS_S3_REGION}
      access-key-id: ${CHRIS_AWS_S3_ACCESS_KEY_ID}
      secret-access-key: ${CHRIS_AWS_S3_SECRET_ACCESS_KEY}
  stripe:
    secret-key: ${CHRIS_STRIPE_SECRET_KEY}
    webhook-secret: ${CHRIS_STRIPE_WEBHOOK_SECRET}
  openai:
    api-key: ${CHRIS_OPENAI_API_KEY}