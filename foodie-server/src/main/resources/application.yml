spring:
  profiles:
    active: dev
  datasource:
    url: jdbc:postgresql://${chris.datasource.host}:${chris.datasource.port}/${chris.datasource.database}
    username: ${chris.datasource.username}
    password: ${chris.datasource.password}
    driver-class-name: ${chris.datasource.driver-class-name}

  jpa:
    hibernate:
      ddl-auto: none
      # none / 不设置：Hibernate 不对数据库做任何 schema 操作。
      # validate：仅校验数据库表结构是否与实体映射一致，如果不一致就抛异常，不会自动建表或改表。
      # update：如上所述，在启动时 “增量” 修改表结构，添加缺失的表/列/索引，但不删列、不改列类型。
      # create：启动时先删表（DROP），再根据所有实体 CREATE TABLE，相当于 “全量重建”。（原有数据会全部丢失）
      # create-drop：跟 create 一样的行为，但会在 SessionFactory 关闭或应用 Context 结束时，再执行一次 DROP ALL TABLES，常用于测试环境。
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.spatial.dialect.postgis.PostgisPG95Dialect

  #配置Redis
  data:
    redis:
      host: 192.168.100.128
      port: 6379
      password:
      lettuce:
        pool:
          max-active: 10
          max-idle: 10
          min-idle: 1
          max-wait: 1000ms
          time-between-eviction-runs: 10s

  #配置RabbitMQ
  rabbitmq:
    host: 192.168.100.128
    port: 5672
    username: root
    password: 1234

  #文件上传配置
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 100MB #一次请求可以上传多个文件，总大小不超过100MB

  kafka:
    admin:
      auto-create: true
    bootstrap-servers: 192.168.100.128:9092,192.168.100.128:9093,192.168.100.128:9094
    producer:
      retries: 3
      acks: all
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    consumer:
      group-id: merchant-service         # 消费者组名
      enable-auto-commit: true
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer

logging:
  level:
    com:
      chris:
        repository: debug
        service: info
        controller: info

resilience4j:
  ratelimiter:
    instances:
      registerUpload:
        limit-for-period: 5
        limit-refresh-period: 1d     # 匿名上传接口：1天 5 次
        timeout-duration: 0
      userUpload:
        limit-for-period: 5
        limit-refresh-period: 1m     # 用户上传接口：1分钟 5 次
        timeout-duration: 0

chris:
  jwt:
    secret-base64: ${chris.jwt.secret-base64}
    access-expiration-seconds: ${chris.jwt.access-expiration-seconds}     # Access Token 有效期 1 小时
    refresh-expiration-seconds: ${chris.jwt.refresh-expiration-seconds}  # Refresh Token 有效期 1 天

  google:
    oauth:
      client-id: ${chris.google.oauth.client-id}
    maps:
      api-key: ${chris.google.maps.api-key}

  aws:
    s3:
      bucket: ${chris.aws.s3.bucket}
      region: ${chris.aws.s3.region}
      access-key-id: ${chris.aws.s3.access-key-id}
      secret-access-key: ${chris.aws.s3.secret-access-key}

  stripe:
    secret-key: ${chris.stripe.secret-key}
    webhook-secret: ${chris.stripe.webhook-secret}

  openai:
    api-key: ${chris.openai.api-key}